{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Avinash Ratnam\\\\Documents\\\\Ramp Internship Code\\\\ramp-internship-code\\\\src\\\\components\\\\InputSelect\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport Downshift from \"downshift\";\nimport { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 20\n          }, this);\n        }\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 20\n          }, this);\n        }\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(InputSelect, \"A8/jCY4wmOfZ0OM0G4SMaxEnjfs=\");\n_c = InputSelect;\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n  return {\n    top: 0,\n    left: 0\n  };\n};\nvar _c;\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","classNames","jsxDEV","_jsxDEV","InputSelect","_ref","_s","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","selectedItem","id","itemToString","item","children","_ref2","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","event","getDropdownPosition","target","style","renderItems","length","map","index","parsedItem","key","value","_c","Element","getBoundingClientRect","scrollY","window","$RefreshReg$"],"sources":["C:/Users/Avinash Ratnam/Documents/Ramp Internship Code/ramp-internship-code/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\r\nimport { useCallback, useState } from \"react\"\r\nimport classNames from \"classnames\"\r\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\r\n\r\nexport function InputSelect<TItem>({\r\n  label,\r\n  defaultValue,\r\n  onChange: consumerOnChange,\r\n  items,\r\n  parseItem,\r\n  isLoading,\r\n  loadingLabel,\r\n}: InputSelectProps<TItem>) {\r\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\r\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\r\n    top: 0,\r\n    left: 0,\r\n  })\r\n\r\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\r\n    (selectedItem) => {\r\n      if (selectedItem === null) {\r\n        return\r\n      }\r\n\r\n      consumerOnChange(selectedItem)\r\n      setSelectedValue(selectedItem)\r\n    },\r\n    [consumerOnChange]\r\n  )\r\n\r\n  return (\r\n    <Downshift<TItem>\r\n      id=\"RampSelect\"\r\n      onChange={onChange}\r\n      selectedItem={selectedValue}\r\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\r\n    >\r\n      {({\r\n        getItemProps,\r\n        getLabelProps,\r\n        getMenuProps,\r\n        isOpen,\r\n        highlightedIndex,\r\n        selectedItem,\r\n        getToggleButtonProps,\r\n        inputValue,\r\n      }) => {\r\n        const toggleProps = getToggleButtonProps()\r\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\r\n\r\n        return (\r\n          <div className=\"RampInputSelect--root\">\r\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\r\n              {label}\r\n            </label>\r\n            <div className=\"RampBreak--xs\" />\r\n            <div\r\n              className=\"RampInputSelect--input\"\r\n              onClick={(event) => {\r\n                setDropdownPosition(getDropdownPosition(event.target))\r\n                toggleProps.onClick(event)\r\n              }}\r\n            >\r\n              {inputValue}\r\n            </div>\r\n\r\n            <div\r\n              className={classNames(\"RampInputSelect--dropdown-container\", {\r\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\r\n              })}\r\n              {...getMenuProps()}\r\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\r\n            >\r\n              {renderItems()}\r\n            </div>\r\n          </div>\r\n        )\r\n\r\n        function renderItems() {\r\n          if (!isOpen) {\r\n            return null\r\n          }\r\n\r\n          if (isLoading) {\r\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\r\n          }\r\n\r\n          if (items.length === 0) {\r\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\r\n          }\r\n\r\n          return items.map((item, index) => {\r\n            const parsedItem = parseItem(item)\r\n            return (\r\n              <div\r\n                key={parsedItem.value}\r\n                {...getItemProps({\r\n                  key: parsedItem.value,\r\n                  index,\r\n                  item,\r\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\r\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\r\n                    \"RampInputSelect--dropdown-item-selected\":\r\n                      parsedSelectedItem?.value === parsedItem.value,\r\n                  }),\r\n                })}\r\n              >\r\n                {parsedItem.label}\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      }}\r\n    </Downshift>\r\n  )\r\n}\r\n\r\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\r\n  if (target instanceof Element) {\r\n    const { top, left } = target.getBoundingClientRect()\r\n    const { scrollY } = window\r\n    return {\r\n      top: scrollY + top + 63,\r\n      left,\r\n    }\r\n  }\r\n\r\n  return { top: 0, left: 0 }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}